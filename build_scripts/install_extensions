#!/usr/bin/env bash

SCRIPT_DIR="${BASH_SOURCE[0]%/*}"
. "$SCRIPT_DIR"/shared.sh

# This takes the requested toolkit and promscale extensions, figures out what versions of cargo-pgx those
# versions want, and then build from the oldest pgx to the newest so that `cargo install cargo-pgx --version`
# commands are only ran once. Once cargo-pgx has been installed, run the installation for the extensions,
# and then continue through the next cargo-pgx version. At the end, we're left with the latest version of
# cargo-pgx so that the builder image can be used to test master/main branches.

[ -z "$PROMSCALE_VERSIONS" ] && PROMSCALE_VERSIONS="0.5.0 0.5.1 0.5.2 0.5.4 0.6.0 0.7.0 master"
[ -z "$TOOLKIT_VERSIONS" ] &&   TOOLKIT_VERSIONS="1.6.0 1.7.0 1.8.0 1.10.1 1.11.0 1.12.0 1.12.1 1.13.0 main"
ORIGINAL_PATH="$PATH"

declare -A pgx_toolkit_versions=(
    ["0.2.4"]="1.[67].0"
    ["0.4.5"]="1.(8|9|10|11).*"
    ["0.5.4"]="1.12.[01]"
    ["0.6.1"]="main|1.1[34].*"
)
declare -A pgx_promscale_versions=(
    ["0.3.1"]="0.5.*"
    ["0.4.5"]="0.[67].0"
    ["0.6.1"]="master|0.7.([1-9]).*|0.8.*"
)

install_toolkit() {
    local rust_release="$RUST_RELEASE" cargo_pgx_version="$1" version="$2" pg pkg deb_version
    [ -z "$rust_release" ] && rust_release=release

    for pg in $(available_pg_versions); do
        read -rs pkg deb_version <<< "$(find_deb "timescaledb-toolkit-postgresql-$pg" "$version")"
        if [[ -n "$pkg" && -n "$deb_version" ]]; then
            [[ "$DRYRUN" = true ]] && { echo "would install debian package $pkg-$deb_version (cargo-pgx: $cargo_pgx_version)"; continue; }
            install_deb "$pkg" "$deb_version" || echo "failed installing $pkg-$deb_version"
            continue
        fi

        case "$version" in
        0.* | 1.[0-5].* ) echo "toolkit version $version is too old to build"; continue;;
        esac
        if [ "$(arch)" != x86_64 ]; then
            case "$version" in
            0.* | 1.[0-9].* | 1.1[0-2].* ) echo "toolkit version $version is too old to build for !amd64"; continue;;
            esac
        fi

        if [[ $pg -eq 15 && "$cargo_pgx_version" =~ 0\.[0-5]\. ]]; then
            # pg15 + cargo-pgx < 0.6.0 don't work together
            echo "toolkit skipping pg$pg and cargo-pgx $cargo_pgx_version, need cargo-pgx >= 0.6.0"
            continue
        fi

        echo " * building toolkit version $version for pg$pg (cargo-pgx: $cargo_pgx_version) *"

        [[ "$DRYRUN" = true ]] && continue

        PATH="/usr/lib/postgresql/$pg/bin:${ORIGINAL_PATH}"
        cargo_pgx_init "$cargo_pgx_version" "$pg" || { echo "failed cargo-pgx $cargo_pgx_version"; continue; }
        git_clone https://github.com/timescale/timescaledb-toolkit.git toolkit || { echo "failed toolkit clone"; continue; }
        git_checkout toolkit "$version" || { echo "failed toolkit checkout $version"; continue; }
        (
            cd /build/toolkit || exit 1
            CARGO_TARGET_DIR_NAME=target ./tools/build "-pg$pg" -profile "$rust_release" install || echo "failed building toolkit $version for pg$pg"
        )
        [[ $? -ne 0 ]] && echo "failed building toolkit $version for pg$pg"
    done
    PATH="$ORIGINAL_PATH"
}

install_promscale() {
    local rust_release="$RUST_RELEASE" cargo_pgx_version="$1" version="$2" pg pkg deb_version
    [ -n "$rust_release" ] && rust_release=-r

    for pg in $(available_pg_versions); do
        read -rs pkg deb_version <<< "$(find_deb "promscale-extension-postgresql-$pg" "$version")"
        if [[ -n "$pkg" && -n "$deb_version" ]]; then
            [[ "$DRYRUN" = true ]] && { echo "would install debian package $pkg-$deb_version (cargo-pgx: $cargo_pgx_version)"; continue; }
            install_deb "$pkg" "$deb_version" || echo "failed installing $pkg-$deb_version"
            continue
        fi

        [ "$pg" -gt 14 ] && { echo "skipping building pg$pg, no feature yet"; continue; }
        case "$version" in
        0.[0-4].* ) echo "promscale_extension version $version is too old to build"; continue;;
        esac
        if [ "$(arch)" != x86_64 ]; then
            case "$version" in
            *) echo "promscale_extension version $version is too old to build for !amd64"; continue;;
            esac
        fi

        if [[ $pg -eq 15 && "$cargo_pgx_version" =~ 0\.[0-5]\. ]]; then
            # pg15 + cargo-pgx < 0.6.0 don't work together
            echo "promscale_extension skipping pg$pg and cargo-pgx $cargo_pgx_version, need cargo-pgx >= 0.6.0"
            continue
        fi

        echo " * building promscale_extension version $version for pg$pg (cargo-pgx: $cargo_pgx_version) *"

        [[ "$DRYRUN" = true ]] && continue

        PATH="/usr/lib/postgresql/$pg/bin:${ORIGINAL_PATH}"
        cargo_pgx_init "$cargo_pgx_version" "$pg" || { echo "failed cargo-pgx $cargo_pgx_version"; continue; }
        git_clone https://github.com/timescale/promscale_extension.git promscale_extension || { echo "failed promscale clone"; continue; }
        git_checkout promscale_extension "$version" || { echo "failed promscale checkout $version"; continue; }
        (
            cd /build/promscale_extension || exit 1
            cp templates/promscale.control ./promscale.control
            cargo pgx install ${rust_release} --features pg${pg} || echo "failed cargo pgx install for pg$pg, promscale_extention $version"
        )
        [[ $? -ne 0 ]] && echo "failed building promscale_extension $version for pg$pg"
    done
    PATH="$ORIGINAL_PATH"
}

[ "$1" = -n ] && { DRYRUN=true; shift; }

declare -A pgx_versions=()
for ver in $TOOLKIT_VERSIONS; do
    matched=false
    for pgx_ver in "${!pgx_toolkit_versions[@]}"; do
        re="${pgx_toolkit_versions[$pgx_ver]}"
        if [[ $ver =~ $re ]]; then
            pgx_versions[$pgx_ver]+=" toolkit-$ver"
            matched=true
            continue 2
        fi
    done
    [[ $matched = false ]] && echo "no match for $ver"
done

for ver in $PROMSCALE_VERSIONS; do
    matched=false
    for pgx_ver in "${!pgx_promscale_versions[@]}"; do
        re="${pgx_promscale_versions[$pgx_ver]}"
        if [[ $ver =~ $re ]]; then
            pgx_versions[$pgx_ver]+=" promscale-$ver"
            matched=true
            continue 2
        fi
    done
    [[ $matched = false ]] && echo "no match for $ver"
done

sorted_pgx_versions="$(for pgx_ver in "${!pgx_versions[@]}"; do echo $pgx_ver; done | sort -V | uniq)"
for pgx_ver in $sorted_pgx_versions; do
    ext_versions="$(for ext_ver in ${pgx_versions[$pgx_ver]}; do echo $ext_ver; done | sort -V | uniq)"
    for ext_ver in $ext_versions; do
        ext="$(echo "$ext_ver" | cut -d- -f1)"
        ver="$(echo "$ext_ver" | cut -d- -f2-)"
        case "$ext" in
        toolkit)   install_toolkit   "$pgx_ver" "$ver";;
        promscale) install_promscale "$pgx_ver" "$ver";;
        esac
    done
done
