#!/usr/bin/env bash

SCRIPT_DIR="${BASH_SOURCE[0]%/*}"
. "$SCRIPT_DIR"/shared.sh

# This is where the actual installation functions are
. "$SCRIPT_DIR"/shared_install.sh

# This takes the requested toolkit and promscale extensions, figures out what versions of cargo-pgx those
# versions want, and then build from the oldest pgx to the newest so that `cargo install cargo-pgx --version`
# commands are only ran once. Once cargo-pgx has been installed, run the installation for the extensions,
# and then continue through the next cargo-pgx version. At the end, we're left with the latest version of
# cargo-pgx so that the builder image can be used to test master/main branches.

[ -z "$PROMSCALE_VERSIONS" ] && PROMSCALE_VERSIONS="master"
[ -z "$TOOLKIT_VERSIONS" ] &&   TOOLKIT_VERSIONS="main"
ORIGINAL_PATH="$PATH"

declare -A pgx_toolkit_versions=(
    ["0.2.4"]="1.[67].0"
    ["0.4.5"]="1.(8|9|10|11).*"
    ["0.5.4"]="1.12.[01]"
    ["0.6.1"]="main|1.1[34].*"
)
declare -A pgx_promscale_versions=(
    ["0.3.1"]="0.5.*"
    ["0.4.5"]="0.[67].0"
    ["0.6.1"]="master|0.7.([1-9]).*|0.8.*"
)

[ "$1" = -n ] && { DRYRUN=true; shift; }

declare -A pgx_versions=()
for ver in $TOOLKIT_VERSIONS; do
    matched=false
    for pgx_ver in "${!pgx_toolkit_versions[@]}"; do
        re="${pgx_toolkit_versions[$pgx_ver]}"
        if [[ $ver =~ $re ]]; then
            pgx_versions[$pgx_ver]+=" toolkit-$ver"
            matched=true
            continue 2
        fi
    done
    [[ $matched = false ]] && echo "no match for $ver"
done

for ver in $PROMSCALE_VERSIONS; do
    matched=false
    for pgx_ver in "${!pgx_promscale_versions[@]}"; do
        re="${pgx_promscale_versions[$pgx_ver]}"
        if [[ $ver =~ $re ]]; then
            pgx_versions[$pgx_ver]+=" promscale-$ver"
            matched=true
            continue 2
        fi
    done
    [[ $matched = false ]] && echo "no match for $ver"
done

sorted_pgx_versions="$(for pgx_ver in "${!pgx_versions[@]}"; do echo "$pgx_ver"; done | sort -V | uniq)"
for pgx_ver in $sorted_pgx_versions; do
    ext_versions="$(for ext_ver in ${pgx_versions[$pgx_ver]}; do echo "$ext_ver"; done | sort -V | uniq)"
    for ext_ver in $ext_versions; do
        ext="$(echo "$ext_ver" | cut -d- -f1)"
        ver="$(echo "$ext_ver" | cut -d- -f2-)"
        case "$ext" in
        toolkit)   install_toolkit   "$pgx_ver" "$ver";;
        promscale) install_promscale "$pgx_ver" "$ver";;
        esac
    done
done
