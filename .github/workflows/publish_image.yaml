name: Publish image

on:
  push:
    tags:
    - 'v*'

env:
  DOCKER_HUB_URL: docker.io/timescale/timescaledb-ha
  INSTALL_METHOD: docker-ha
  TIMESCALE_CLOUDUTILS: "v1.1.7"
  TIMESCALE_HOT_FORGE: "v0.1.39"
  TIMESCALE_PATRONI_K8S_SYNC: "v0.1.2"
  TIMESCALE_OOM_GUARD:  "v1.4.2"
  TIMESCALE_STATIC_PRIMARY: ''
  TIMESCALE_TSDB_ADMIN: "1.0.0"
  TIMESCALEDB_TOOLKIT_EXTENSIONS: 1.6.0 1.7.0 1.8.0 1.10.1 1.11.0
jobs:
  publish-image:
    name: Publish the Docker Images
    strategy:
      matrix:
        include:
        # This is the 'default' image, it contains PostgreSQL 14 13 and 12, and defaults to PostgreSQL 14 binaries
        - pg_major: "14"
          pg_versions: "14 13 12"
        # This is the 'default' image, along with Patroni changes to support static primaries
        - pg_major: "14"
          pg_versions: "14 13 12"
          patroni_static_primary: "true"
          docker_tag_postfix: "-patroni-static-primary"
        # This is the PostgreSQL 14 image containing only oss software
        - pg_major: "14"
          pg_versions: "14 13 12"
          docker_extra_buildargs: ' --build-arg OSS_ONLY=" -DAPACHE_ONLY=1"'
          docker_tag_postfix: '-oss'
        # This is the older 'default' image, it contains PostgreSQL 12 and 13, and defaults to PostgreSQL 13 binaries
        - pg_major: "13"
          pg_versions: "13 12"
        # This is the older PostgreSQL 13 image containing only oss software
        - pg_major: "13"
          pg_versions: "13 12"
          docker_extra_buildargs: ' --build-arg OSS_ONLY=" -DAPACHE_ONLY=1"'
          docker_tag_postfix: '-oss'
        - pg_major: "12"
          pg_versions: "12"
        - pg_major: "12"
          pg_versions: "12"
          docker_extra_buildargs: ' --build-arg OSS_ONLY=" -DAPACHE_ONLY=1"'
          docker_tag_postfix: '-oss'
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get tag name
        id: tag_name
        run:
          echo ::set-output name=GIT_TAG::${GITHUB_REF#refs/tags/}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Publish PostgreSQL Docker Images to their registries
        env:
          GIT_REV: ${{ steps.tag_name.outputs.GIT_TAG }}
          PRIVATE_REPO_TOKEN: ${{ secrets.GH_PRIVATE_TOKEN }}
          DOCKER_EXTRA_BUILDARGS: ${{ matrix.docker_extra_buildargs }}
          DOCKER_TAG_POSTFIX: ${{ matrix.docker_tag_postfix }}
          PG_MAJOR: ${{ matrix.pg_major }}
          PG_VERSIONS: ${{ matrix.pg_versions }}
          DOCKER_ECR_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/timescaledb-ha
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TIMESCALE_STATIC_PRIMARY: ${{ matrix.patroni_static_primary }}
        # Note that our ECR registry has immutability guarantees, therefore we do not push
        # the mutable ('latest') tags to the ECR registry
        run: |
          DOCKER_PUBLISH_URLS="${DOCKER_HUB_URL} ${DOCKER_ECR_URL}" make publish-immutable
          DOCKER_PUBLISH_URLS="${DOCKER_HUB_URL}" make publish-mutable
      - name: List docker Images
        env:
          GIT_REV: ${{ steps.tag_name.outputs.GIT_TAG }}
        run: |
          make list-images
