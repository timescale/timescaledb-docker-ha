# For more details on configuring a GitlabCI yaml file, see the docs here:
# https://docs.gitlab.com/ee/ci/yaml/#parameter-details

image:
  # Use a docker aware base image with git. Though, any other image will do. Use something like
  # this if you need access to the docker daemon.
  name: docker:18.09-git

services:
  # Include this service if you need to interface with Docker from the build container.
  #
  # Any other "services" which you might need from the CI system can be added here. They will be
  # spun-up as new containers in the job's pod and will be accessible over the localhost network.
  - name: docker:18.09-dind
    alias: docker

# Gitlab CI stages define the general structure of any possible build job. For every job executed,
# the stages will be triggered in order, executing any jobs defined for the respective stage.
#
# **THIS DOES NOT DEFINE THE ACTUAL PIPELINE.** The pipeline is composed of the stages defined
# here combined with the jobs defined below (a job is any YAML section below which contains the
# `script` keyword). Pipelines are formed by creating jobs which are executed as part
# of specific stages.
stages:
  - build
  - tests.system
  - tests.load
  - release

variables:
  # Use an allegedly faster FS option for docker builds.
  DOCKER_DRIVER: "overlay2"
  # Point to the `docker:stable-dind` service defined above.
  DOCKER_HOST: "tcp://localhost:2375"
  # The Docker Registry to which to push
  REGISTRY: ${CI_REGISTRY}
  # This is injected into the Docker image to have some traceability to its build context
  GIT_AUTHOR: GitLab CI/CD
  # The image tag to use for this CI pipeline's build. This is used by deployments.
  TAG: ${CI_PIPELINE_ID}
  # The name of the K8s ImagePullSecret to use for this project.
  REGISTRY_SECRET_NAME: registry-key-savannah-timescaledb-docker-patroni
  # Using the default mirrors caused a lot of timeouts previously
  DEBIAN_REPO_MIRROR: cdn-aws.deb.debian.org

before_script:
  # NOTE: these credentials are created by the GitlabCI system, and are ephemeral. They are only
  # valid for the duration of the currently running CI job.
  - apk add make jq
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build.feature-branch-11: &build_feature-branch
  stage: build
  except: [ "master", "release", "tags" ]
  tags: [ "docker" ]
  variables:
    PG_MAJOR: "11"
    DOCKER_IMAGE_CACHE: --cache-from registry.gitlab.com/timescale/timescaledb-docker-ha:builder-pg11
  script:
    - docker pull registry.gitlab.com/timescale/timescaledb-docker-ha:builder-pg${PG_MAJOR} || true
    - make push-builder
    - make test
    - make push
    - docker image ls

build.feature-branch-12:
  << : *build_feature-branch
  variables:
    PG_MAJOR: "12"
    DOCKER_IMAGE_CACHE: --cache-from registry.gitlab.com/timescale/timescaledb-docker-ha:builder-pg12

build.master-branch-11: &build_master-branch
  stage: build
  only: [ "master" ]
  tags: [ "docker" ]
  variables:
    PG_MAJOR: "11"
  script:
    - make push-builder
    - make test
    - make push-all
    - docker image ls

build.master-branch-12:
  << : *build_master-branch
  variables:
    PG_MAJOR: "12"

build.release-11: &build_release
  stage: build
  only: [ "tags" ]
  tags: [ "docker" ]
  variables:
    PG_MAJOR: "11"
  variables:
    TAG: ${CI_COMMIT_TAG}
    GIT_REV: ${CI_COMMIT_TAG}
  script:
    - make test
    - make push-all
    - docker image ls

build.release-12:
  << : *build_release
  variables:
    PG_MAJOR: "12"

